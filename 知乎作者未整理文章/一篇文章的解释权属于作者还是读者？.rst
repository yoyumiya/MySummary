..KennethLee版权所有2018-2019

:Authors:KennethLee
:Version:1.0


一篇文章的解释权属于作者还是读者？
==================================

当然我可以直接在那个回答中补充，但作为一个程序员，我不喜欢在一个函数或者一个模块中补充同级别的其他独立论述……所以，让我在这里开一个独立的主题吧。因为这个确实也可以作为一个独立主题来讨论：）

知乎用户G0K17q

【介绍】

在下面这个讨论中：

《道德经》讲了什么？为什么它广受推崇？-innek
的回答

，不少人在纠缠《道德经》的版本问题，某个字是什么含义的问题，等等。我在写这个回答的时候就知道这种事情肯定会发生的，因为这正是某些人越不过去，无法理解老子的原因。

所以我在整个回答的开头，放了一个“我操”
的故事，但那个故事太简单了。在那里只能这样，因为那个主题不是这个，在那里展开会削弱表达，但这个故事其实是很值得展开来说的，我在这里展开。

在那个故事中，我说了两个情节，第一个是，如果这个人死了，你问都不能问，而他仅仅说了一句话，无法互相参照，你无法凭着两句话理解他是什么意思。第二情节是，这个人被救回来了，你问他当时什么意思，他的回答是他的第二遍意思，那个意思也不见得真正是他的意思。

所以，在一般的语言交流中，当一句话说完了，这句话的解释权属于读者（作者是其中一个读者），而不是作者。但请你也要注意了，这个
“读者”，到底是一个“读者”，还是一群
“读者”，这也要问你的上下文是什么了。因为整个解读，不过是一群人在建共同的名称空间的过程。一群傻子也可以建出他们自己的《道德经》名称空间，只是他们见不出逻辑，而且不能用来解决问题而已。

【共识】

对此，我们有必要简单探讨一下什么是“共识”，

正如我在那个故事的描述中提到的，语言的表述是永远都存在歧义的，无论你用世界上哪种语言来描述。这正是
“道可道非常道，名可名非常名”
的原因。因为每个名都需要用名和道来解释（道本身——无论是类型还是变量——就是名），我们之所有能有共识，是我们可以“匹配”。我看到一个蓝色的东西，我说这是“blue”，你看到的其实是一个我认识中的浅蓝，但你接受，因为下次看到一个类似的东西，我还是说“blue”，你是觉得可以接受的。假设你的感光系统很奇怪，对光线频率的感知是离散的，蓝和浅蓝对你来说是完全不同的东西，反而和浅红非常类似，我们就无法匹配了，这个名就无法在你我之间存在下去。

我们人和人之间今天可以拥有的共识，是一系列匹配，淘汰过程中形成的，有些东西我们觉得顺理成章，其实不那么顺理成章的。而且很多共识其实是不能细化的，就如同前面那个蓝和浅蓝的认识，交流下去我们的共识就可能不同，你觉得用频率可以让我们有共识，那只是我们在
“数字”上有共识，不是我们在“蓝色”
上有共识。在知乎上，都说“好人都有好报”，我们两个可能就觉得对方是知己了，下一步交流，原来你说的好人是“不做犬儒，我要真普选”，我说的好人是“来了就是深圳人，来了就当志愿者”，我们可能就开始拍桌子，把手指头放在对方的脑门上了。

如果你可以理解这一点，你就应该明白，那个“我操”
确实是无法最终解释的，包括作者自己都不具有对它的最终解释权。正如我说的，你把他救回来，问他，“你到底当时什么意思？你丫的说错了打死你”，他可能就给你解释
“我当时的意思就是感谢上帝，没有别的意思，Wo是火星文中感谢的意思，Cao
是潘多拉星球上帝的意思”，你能怎么着？

所以，当我去解读一个完整的文档，其实我不太在乎在经过漫长的历史中经过了多少传递的损失和修改，我关注的是它的
“架构”，就是它在历史长河中被完整保存，持续不变的那个含义，那些什么哪里出土了什么真本，然后什么颠覆什么人的世界观了，那种东西我也不是不知道，但我看这种东西仍是把它看作是构架下的某种变体，除非你能在那个之外建出合理的构架模型来，我还有可能正眼看你一下，否则，等文字研究人员多扭几年（并把概念传递到我们这些交流对象中）再说吧。这就是
“眼前此刻”的其中一个解释。

用眼前此刻为基础来看世界，可能是我们能达成的最好的不被洗脑的状态了。

【架构】

这里谈到架构，就要涉及到我的独特名称空间了——其实，我是一个软件架构师：）

希望读者可以忍耐一下，我尽量说得通用一点，但愿这个可以类比到您的行业。

什么是软件架构？有一本很出名的软件架构的书（好像叫《软件架构编档》吧）里面有一个很精彩的描述：软件架构就是架构师眼中的设计。

这句话非常精准，但对于外行来说，这句话说了等于没有说。让我换一种说法，比如我设计一款产品，6
月上市，这款产品每个特性都要完成了，你才能往外卖吧。然则，实现这个产品的所有技术，方方面面，就称为设计（区别于生产，因为生产是设计结果的多次重复）。但这个产品完成后，它只是
1.0，以后我还要升级的，明年6月，我可能就出一个
V2.0，V2.0
就不会从头开始了，它是基于1.0
的技术进行改进的，对于软件来说，这一点表现得更彻底，因为这个修改会直接发生在
V1.0
上。软件的生产最便宜（仅仅是编译，甚至不需要编译），设计就是软件的代码本身。

作为一个同时要负责V1.0,V2.0,V3.0这样一个持续的开发过程的人，我就要从
1.0
开始，就要考虑到对未来的变化，而在我的软件的实现的时候，我就能预期什么样的变化是容易的，什么变化是困难的，困难的变化就会成为未来的约束，这些东西就是我的软件架构。而软件架构师的工作，是对未来做出准确的判断，确定把
“约束”建立在什么地方，接受什么作为约束。

这个概念应该在每个行业都是存在的，比如建筑师看到一个房子，他会知道哪里是承重墙，哪里是普通墙，哪里可以打掉，哪里可以组合成一个房间。在考虑这个问题的时候，他们眼中没有了房子，只有这个房子的架构，装修的时候他们就可以玩出千变万化来。又比如企业家在组织一个公司的时候，开始的时候可能要一个人同时负责研发和销售，但他考虑清楚了商业模型，知道什么东西应该自己做，什么东西外包，什么东西外购，这样他这个公司发展过去，部门组织也是可以有控制地发展的。其他搞政治，搞娱乐，都是这样，我们总是需要在发展和生存间取得平衡。而不懂做事的人，只能看到眼前的东西，总在问为什么不这样，为什么不那样，那样不是更合理吗？他们不明白，你以为我不知道什么是合理吗？合理是要成本的好不好？

但是，你们要注意，架构很大程度上，不是被设计出来的，精巧的架构往往生命力不强。因为你的脑子再强，你也掌握不了细节，控制不了世界。掌握不了细节决定你无法做出完全正确的判断，控制不了世界决定了你不能保证计划按设想运行。所以，架构师更多时候要接受架构离开自己的控制，或者接手别人的构架。架构师的能力就是用很短的时间内，从别人的软件设计中发现这个设计的架构是什么。

我的工作很特殊，我同时是消费芯片，IT
芯片，专用设备芯片的软件解决方案架构师，我为我们的芯片确定使用什么软件解决方案，判断支持什么方案的代价是什么，所以我常常需要分析很多很多已经存在的开源的非开源的软件代码。在我眼中，架构早已经不属于作者了，架构属于它现在的那个样子，是现有设计的一部分，是我在看待未来的时候，现有设计不可改变（或者改变的成本很高）的部分。

【结论】

我绕了一大圈，现在你们可以明白我在说什么吗？当我解读道德经的时候，我采取的是我看软件一样的模式，我在解读的是它的架构，一两个字的含义，只要不对上下逻辑对齐产生影响，我只当它是个小
bugfixing，无关紧要的东西（从投资角度来说），我才不关心呢：）

而我认为，一个
“知识”，如果它能拿来用，我们关心的显然是他被使用的部分，而不是者原始表达的部分。而一个
“精华经验”，显然也是它被千百年
“折腾”
以后，流传下来的东西，留下来的那些不变的东西，老子本身，已经毫无意义了。那时研究历史这个角度的人的问题，不是我们这些阅读求得益的人的问题。

初稿2015-4。Kenneth-Lee。
